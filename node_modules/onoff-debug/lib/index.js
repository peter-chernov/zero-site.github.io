"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gpio = void 0;
var onoff_1 = require("onoff");
var os_1 = require("os");
var fs_1 = require("fs");
var TMP_FILE = (0, os_1.tmpdir)() + '/gpio_debug.json';
var Gpio = /** @class */ (function () {
    function Gpio(gpio, direction, edge, options) {
        if (edge === void 0) { edge = 'none'; }
        if (options === void 0) { options = {}; }
        this.gpio = 0;
        this.original = undefined;
        try {
            this.original = new onoff_1.Gpio(gpio, direction, edge, options);
        }
        catch (e) {
            console.info('The Debug Mode is on');
            this.gpio = gpio;
            Gpio.init();
            if (options.reconfigureDirection !== false) {
                Gpio.states[this.gpio] = 0;
                (0, fs_1.writeFileSync)(TMP_FILE, JSON.stringify(Gpio.states));
            }
        }
    }
    Gpio.init = function () {
        if (!(0, fs_1.existsSync)(TMP_FILE)) {
            (0, fs_1.writeFileSync)(TMP_FILE, JSON.stringify(Gpio.states.fill(0)));
        }
        Gpio.states = JSON.parse((0, fs_1.readFileSync)(TMP_FILE, 'utf8'));
    };
    Gpio.info = function () {
        Gpio.init();
        console.info(Gpio.states);
    };
    Gpio.prototype.readSync = function () {
        if (this.original) {
            return this.original.readSync();
        }
        return Gpio.states[this.gpio];
    };
    Gpio.prototype.writeSync = function (value) {
        if (this.original) {
            return this.original.writeSync(value);
        }
        Gpio.states[this.gpio] = value === 0 ? 0 : 1;
        (0, fs_1.writeFileSync)(TMP_FILE, JSON.stringify(Gpio.states));
    };
    Gpio.states = new Array(40);
    return Gpio;
}());
exports.Gpio = Gpio;
